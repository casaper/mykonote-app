{"version":3,"sources":["../node_modules/bootbox/bootbox.js"],"names":["__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","root","factory","__webpack_require__","undefined","init","$","templates","dialog","header","footer","closeButton","form","inputs","text","textarea","email","select","checkbox","date","time","number","password","defaults","locale","backdrop","animate","className","show","container","exports","_t","key","locales","en","processCallback","e","callback","stopPropagation","preventDefault","preserveDialog","isFunction","call","modal","each","collection","iterator","index","value","mergeArguments","args","properties","extend","argn","length","options","Error","mapArguments","mergeDialogOptions","labels","baseOptions","buttons","createLabels","apply","validateButtons","i","j","arguments","argument","toLowerCase","toUpperCase","label","allowedButtons","join","alert","ok","onEscape","this","confirm","cancel","prompt","input","shouldShow","inputOptions","inputType","message","val","checkedItems","find","_","item","push","title","groups","isArray","option","elem","group","attr","append","values","prop","placeholder","pattern","maxlength","on","click","off","focus","total","obj","k","t","getKeyLength","button","type","sanitize","innerDialog","body","buttonStr","callbacks","fn","html","addClass","size","before","prepend","css","prependTo","after","target","remove","children","currentTarget","get","trigger","callbackKey","data","which","keyboard","setDefaults","hideAll","bg_BG","OK","CANCEL","CONFIRM","br","cs","da","de","el","es","et","fa","fi","fr","he","hu","hr","id","it","ja","lt","lv","nl","no","pl","pt","ru","sq","sv","th","tr","zh_CN","zh_TW","addLocale","name","v","removeLocale","setLocale","_$","module"],"mappings":"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","file":"static/js/0.f2252517.chunk.js","sourcesContent":["/**\n * bootbox.js [v4.4.0]\n *\n * http://bootboxjs.com/license.txt\n */\n// @see https://github.com/makeusabrew/bootbox/issues/180\n// @see https://github.com/makeusabrew/bootbox/issues/186\n(function (root, factory) {\n  \"use strict\";\n\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"jquery\"], factory);\n  } else if (typeof exports === \"object\") {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory(require(\"jquery\"));\n  } else {\n    // Browser globals (root is window)\n    root.bootbox = factory(root.jQuery);\n  }\n})(this, function init($, undefined) {\n  \"use strict\"; // the base DOM structure needed to create a modal\n\n  var templates = {\n    dialog: \"<div class='bootbox modal' tabindex='-1' role='dialog'>\" + \"<div class='modal-dialog'>\" + \"<div class='modal-content'>\" + \"<div class='modal-body'><div class='bootbox-body'></div></div>\" + \"</div>\" + \"</div>\" + \"</div>\",\n    header: \"<div class='modal-header'>\" + \"<h4 class='modal-title'></h4>\" + \"</div>\",\n    footer: \"<div class='modal-footer'></div>\",\n    closeButton: \"<button type='button' class='bootbox-close-button close' data-dismiss='modal' aria-hidden='true'>&times;</button>\",\n    form: \"<form class='bootbox-form'></form>\",\n    inputs: {\n      text: \"<input class='bootbox-input bootbox-input-text form-control' autocomplete=off type=text />\",\n      textarea: \"<textarea class='bootbox-input bootbox-input-textarea form-control'></textarea>\",\n      email: \"<input class='bootbox-input bootbox-input-email form-control' autocomplete='off' type='email' />\",\n      select: \"<select class='bootbox-input bootbox-input-select form-control'></select>\",\n      checkbox: \"<div class='checkbox'><label><input class='bootbox-input bootbox-input-checkbox' type='checkbox' /></label></div>\",\n      date: \"<input class='bootbox-input bootbox-input-date form-control' autocomplete=off type='date' />\",\n      time: \"<input class='bootbox-input bootbox-input-time form-control' autocomplete=off type='time' />\",\n      number: \"<input class='bootbox-input bootbox-input-number form-control' autocomplete=off type='number' />\",\n      password: \"<input class='bootbox-input bootbox-input-password form-control' autocomplete='off' type='password' />\"\n    }\n  };\n  var defaults = {\n    // default language\n    locale: \"en\",\n    // show backdrop or not. Default to static so user has to interact with dialog\n    backdrop: \"static\",\n    // animate the modal in/out\n    animate: true,\n    // additional class string applied to the top level dialog\n    className: null,\n    // whether or not to include a close button\n    closeButton: true,\n    // show the dialog immediately by default\n    show: true,\n    // dialog container\n    container: \"body\"\n  }; // our public object; augmented after our private API\n\n  var exports = {};\n  /**\n   * @private\n   */\n\n  function _t(key) {\n    var locale = locales[defaults.locale];\n    return locale ? locale[key] : locales.en[key];\n  }\n\n  function processCallback(e, dialog, callback) {\n    e.stopPropagation();\n    e.preventDefault(); // by default we assume a callback will get rid of the dialog,\n    // although it is given the opportunity to override this\n    // so, if the callback can be invoked and it *explicitly returns false*\n    // then we'll set a flag to keep the dialog active...\n\n    var preserveDialog = $.isFunction(callback) && callback.call(dialog, e) === false; // ... otherwise we'll bin it\n\n    if (!preserveDialog) {\n      dialog.modal(\"hide\");\n    }\n  }\n\n  function getKeyLength(obj) {\n    // @TODO defer to Object.keys(x).length if available?\n    var k,\n        t = 0;\n\n    for (k in obj) {\n      t++;\n    }\n\n    return t;\n  }\n\n  function each(collection, iterator) {\n    var index = 0;\n    $.each(collection, function (key, value) {\n      iterator(key, value, index++);\n    });\n  }\n\n  function sanitize(options) {\n    var buttons;\n    var total;\n\n    if (typeof options !== \"object\") {\n      throw new Error(\"Please supply an object of options\");\n    }\n\n    if (!options.message) {\n      throw new Error(\"Please specify a message\");\n    } // make sure any supplied options take precedence over defaults\n\n\n    options = $.extend({}, defaults, options);\n\n    if (!options.buttons) {\n      options.buttons = {};\n    }\n\n    buttons = options.buttons;\n    total = getKeyLength(buttons);\n    each(buttons, function (key, button, index) {\n      if ($.isFunction(button)) {\n        // short form, assume value is our callback. Since button\n        // isn't an object it isn't a reference either so re-assign it\n        button = buttons[key] = {\n          callback: button\n        };\n      } // before any further checks make sure by now button is the correct type\n\n\n      if ($.type(button) !== \"object\") {\n        throw new Error(\"button with key \" + key + \" must be an object\");\n      }\n\n      if (!button.label) {\n        // the lack of an explicit label means we'll assume the key is good enough\n        button.label = key;\n      }\n\n      if (!button.className) {\n        if (total <= 2 && index === total - 1) {\n          // always add a primary to the main option in a two-button dialog\n          button.className = \"btn-primary\";\n        } else {\n          button.className = \"btn-default\";\n        }\n      }\n    });\n    return options;\n  }\n  /**\n   * map a flexible set of arguments into a single returned object\n   * if args.length is already one just return it, otherwise\n   * use the properties argument to map the unnamed args to\n   * object properties\n   * so in the latter case:\n   * mapArguments([\"foo\", $.noop], [\"message\", \"callback\"])\n   * -> { message: \"foo\", callback: $.noop }\n   */\n\n\n  function mapArguments(args, properties) {\n    var argn = args.length;\n    var options = {};\n\n    if (argn < 1 || argn > 2) {\n      throw new Error(\"Invalid argument length\");\n    }\n\n    if (argn === 2 || typeof args[0] === \"string\") {\n      options[properties[0]] = args[0];\n      options[properties[1]] = args[1];\n    } else {\n      options = args[0];\n    }\n\n    return options;\n  }\n  /**\n   * merge a set of default dialog options with user supplied arguments\n   */\n\n\n  function mergeArguments(defaults, args, properties) {\n    return $.extend( // deep merge\n    true, // ensure the target is an empty, unreferenced object\n    {}, // the base options object for this type of dialog (often just buttons)\n    defaults, // args could be an object or array; if it's an array properties will\n    // map it to a proper options object\n    mapArguments(args, properties));\n  }\n  /**\n   * this entry-level method makes heavy use of composition to take a simple\n   * range of inputs and return valid options suitable for passing to bootbox.dialog\n   */\n\n\n  function mergeDialogOptions(className, labels, properties, args) {\n    //  build up a base set of dialog properties\n    var baseOptions = {\n      className: \"bootbox-\" + className,\n      buttons: createLabels.apply(null, labels)\n    }; // ensure the buttons properties generated, *after* merging\n    // with user args are still valid against the supplied labels\n\n    return validateButtons( // merge the generated base properties with user supplied arguments\n    mergeArguments(baseOptions, args, // if args.length > 1, properties specify how each arg maps to an object key\n    properties), labels);\n  }\n  /**\n   * from a given list of arguments return a suitable object of button labels\n   * all this does is normalise the given labels and translate them where possible\n   * e.g. \"ok\", \"confirm\" -> { ok: \"OK, cancel: \"Annuleren\" }\n   */\n\n\n  function createLabels() {\n    var buttons = {};\n\n    for (var i = 0, j = arguments.length; i < j; i++) {\n      var argument = arguments[i];\n      var key = argument.toLowerCase();\n      var value = argument.toUpperCase();\n      buttons[key] = {\n        label: _t(value)\n      };\n    }\n\n    return buttons;\n  }\n\n  function validateButtons(options, buttons) {\n    var allowedButtons = {};\n    each(buttons, function (key, value) {\n      allowedButtons[value] = true;\n    });\n    each(options.buttons, function (key) {\n      if (allowedButtons[key] === undefined) {\n        throw new Error(\"button key \" + key + \" is not allowed (options are \" + buttons.join(\"\\n\") + \")\");\n      }\n    });\n    return options;\n  }\n\n  exports.alert = function () {\n    var options;\n    options = mergeDialogOptions(\"alert\", [\"ok\"], [\"message\", \"callback\"], arguments);\n\n    if (options.callback && !$.isFunction(options.callback)) {\n      throw new Error(\"alert requires callback property to be a function when provided\");\n    }\n    /**\n     * overrides\n     */\n\n\n    options.buttons.ok.callback = options.onEscape = function () {\n      if ($.isFunction(options.callback)) {\n        return options.callback.call(this);\n      }\n\n      return true;\n    };\n\n    return exports.dialog(options);\n  };\n\n  exports.confirm = function () {\n    var options;\n    options = mergeDialogOptions(\"confirm\", [\"cancel\", \"confirm\"], [\"message\", \"callback\"], arguments);\n    /**\n     * overrides; undo anything the user tried to set they shouldn't have\n     */\n\n    options.buttons.cancel.callback = options.onEscape = function () {\n      return options.callback.call(this, false);\n    };\n\n    options.buttons.confirm.callback = function () {\n      return options.callback.call(this, true);\n    }; // confirm specific validation\n\n\n    if (!$.isFunction(options.callback)) {\n      throw new Error(\"confirm requires a callback\");\n    }\n\n    return exports.dialog(options);\n  };\n\n  exports.prompt = function () {\n    var options;\n    var defaults;\n    var dialog;\n    var form;\n    var input;\n    var shouldShow;\n    var inputOptions; // we have to create our form first otherwise\n    // its value is undefined when gearing up our options\n    // @TODO this could be solved by allowing message to\n    // be a function instead...\n\n    form = $(templates.form); // prompt defaults are more complex than others in that\n    // users can override more defaults\n    // @TODO I don't like that prompt has to do a lot of heavy\n    // lifting which mergeDialogOptions can *almost* support already\n    // just because of 'value' and 'inputType' - can we refactor?\n\n    defaults = {\n      className: \"bootbox-prompt\",\n      buttons: createLabels(\"cancel\", \"confirm\"),\n      value: \"\",\n      inputType: \"text\"\n    };\n    options = validateButtons(mergeArguments(defaults, arguments, [\"title\", \"callback\"]), [\"cancel\", \"confirm\"]); // capture the user's show value; we always set this to false before\n    // spawning the dialog to give us a chance to attach some handlers to\n    // it, but we need to make sure we respect a preference not to show it\n\n    shouldShow = options.show === undefined ? true : options.show;\n    /**\n     * overrides; undo anything the user tried to set they shouldn't have\n     */\n\n    options.message = form;\n\n    options.buttons.cancel.callback = options.onEscape = function () {\n      return options.callback.call(this, null);\n    };\n\n    options.buttons.confirm.callback = function () {\n      var value;\n\n      switch (options.inputType) {\n        case \"text\":\n        case \"textarea\":\n        case \"email\":\n        case \"select\":\n        case \"date\":\n        case \"time\":\n        case \"number\":\n        case \"password\":\n          value = input.val();\n          break;\n\n        case \"checkbox\":\n          var checkedItems = input.find(\"input:checked\"); // we assume that checkboxes are always multiple,\n          // hence we default to an empty array\n\n          value = [];\n          each(checkedItems, function (_, item) {\n            value.push($(item).val());\n          });\n          break;\n      }\n\n      return options.callback.call(this, value);\n    };\n\n    options.show = false; // prompt specific validation\n\n    if (!options.title) {\n      throw new Error(\"prompt requires a title\");\n    }\n\n    if (!$.isFunction(options.callback)) {\n      throw new Error(\"prompt requires a callback\");\n    }\n\n    if (!templates.inputs[options.inputType]) {\n      throw new Error(\"invalid prompt type\");\n    } // create the input based on the supplied type\n\n\n    input = $(templates.inputs[options.inputType]);\n\n    switch (options.inputType) {\n      case \"text\":\n      case \"textarea\":\n      case \"email\":\n      case \"date\":\n      case \"time\":\n      case \"number\":\n      case \"password\":\n        input.val(options.value);\n        break;\n\n      case \"select\":\n        var groups = {};\n        inputOptions = options.inputOptions || [];\n\n        if (!$.isArray(inputOptions)) {\n          throw new Error(\"Please pass an array of input options\");\n        }\n\n        if (!inputOptions.length) {\n          throw new Error(\"prompt with select requires options\");\n        }\n\n        each(inputOptions, function (_, option) {\n          // assume the element to attach to is the input...\n          var elem = input;\n\n          if (option.value === undefined || option.text === undefined) {\n            throw new Error(\"given options in wrong format\");\n          } // ... but override that element if this option sits in a group\n\n\n          if (option.group) {\n            // initialise group if necessary\n            if (!groups[option.group]) {\n              groups[option.group] = $(\"<optgroup/>\").attr(\"label\", option.group);\n            }\n\n            elem = groups[option.group];\n          }\n\n          elem.append(\"<option value='\" + option.value + \"'>\" + option.text + \"</option>\");\n        });\n        each(groups, function (_, group) {\n          input.append(group);\n        }); // safe to set a select's value as per a normal input\n\n        input.val(options.value);\n        break;\n\n      case \"checkbox\":\n        var values = $.isArray(options.value) ? options.value : [options.value];\n        inputOptions = options.inputOptions || [];\n\n        if (!inputOptions.length) {\n          throw new Error(\"prompt with checkbox requires options\");\n        }\n\n        if (!inputOptions[0].value || !inputOptions[0].text) {\n          throw new Error(\"given options in wrong format\");\n        } // checkboxes have to nest within a containing element, so\n        // they break the rules a bit and we end up re-assigning\n        // our 'input' element to this container instead\n\n\n        input = $(\"<div/>\");\n        each(inputOptions, function (_, option) {\n          var checkbox = $(templates.inputs[options.inputType]);\n          checkbox.find(\"input\").attr(\"value\", option.value);\n          checkbox.find(\"label\").append(option.text); // we've ensured values is an array so we can always iterate over it\n\n          each(values, function (_, value) {\n            if (value === option.value) {\n              checkbox.find(\"input\").prop(\"checked\", true);\n            }\n          });\n          input.append(checkbox);\n        });\n        break;\n    } // @TODO provide an attributes option instead\n    // and simply map that as keys: vals\n\n\n    if (options.placeholder) {\n      input.attr(\"placeholder\", options.placeholder);\n    }\n\n    if (options.pattern) {\n      input.attr(\"pattern\", options.pattern);\n    }\n\n    if (options.maxlength) {\n      input.attr(\"maxlength\", options.maxlength);\n    } // now place it in our form\n\n\n    form.append(input);\n    form.on(\"submit\", function (e) {\n      e.preventDefault(); // Fix for SammyJS (or similar JS routing library) hijacking the form post.\n\n      e.stopPropagation(); // @TODO can we actually click *the* button object instead?\n      // e.g. buttons.confirm.click() or similar\n\n      dialog.find(\".btn-primary\").click();\n    });\n    dialog = exports.dialog(options); // clear the existing handler focusing the submit button...\n\n    dialog.off(\"shown.bs.modal\"); // ...and replace it with one focusing our input, if possible\n\n    dialog.on(\"shown.bs.modal\", function () {\n      // need the closure here since input isn't\n      // an object otherwise\n      input.focus();\n    });\n\n    if (shouldShow === true) {\n      dialog.modal(\"show\");\n    }\n\n    return dialog;\n  };\n\n  exports.dialog = function (options) {\n    options = sanitize(options);\n    var dialog = $(templates.dialog);\n    var innerDialog = dialog.find(\".modal-dialog\");\n    var body = dialog.find(\".modal-body\");\n    var buttons = options.buttons;\n    var buttonStr = \"\";\n    var callbacks = {\n      onEscape: options.onEscape\n    };\n\n    if ($.fn.modal === undefined) {\n      throw new Error(\"$.fn.modal is not defined; please double check you have included \" + \"the Bootstrap JavaScript library. See http://getbootstrap.com/javascript/ \" + \"for more details.\");\n    }\n\n    each(buttons, function (key, button) {\n      // @TODO I don't like this string appending to itself; bit dirty. Needs reworking\n      // can we just build up button elements instead? slower but neater. Then button\n      // can just become a template too\n      buttonStr += \"<button data-bb-handler='\" + key + \"' type='button' class='btn \" + button.className + \"'>\" + button.label + \"</button>\";\n      callbacks[key] = button.callback;\n    });\n    body.find(\".bootbox-body\").html(options.message);\n\n    if (options.animate === true) {\n      dialog.addClass(\"fade\");\n    }\n\n    if (options.className) {\n      dialog.addClass(options.className);\n    }\n\n    if (options.size === \"large\") {\n      innerDialog.addClass(\"modal-lg\");\n    } else if (options.size === \"small\") {\n      innerDialog.addClass(\"modal-sm\");\n    }\n\n    if (options.title) {\n      body.before(templates.header);\n    }\n\n    if (options.closeButton) {\n      var closeButton = $(templates.closeButton);\n\n      if (options.title) {\n        dialog.find(\".modal-header\").prepend(closeButton);\n      } else {\n        closeButton.css(\"margin-top\", \"-10px\").prependTo(body);\n      }\n    }\n\n    if (options.title) {\n      dialog.find(\".modal-title\").html(options.title);\n    }\n\n    if (buttonStr.length) {\n      body.after(templates.footer);\n      dialog.find(\".modal-footer\").html(buttonStr);\n    }\n    /**\n     * Bootstrap event listeners; used handle extra\n     * setup & teardown required after the underlying\n     * modal has performed certain actions\n     */\n\n\n    dialog.on(\"hidden.bs.modal\", function (e) {\n      // ensure we don't accidentally intercept hidden events triggered\n      // by children of the current dialog. We shouldn't anymore now BS\n      // namespaces its events; but still worth doing\n      if (e.target === this) {\n        dialog.remove();\n      }\n    });\n    /*\n    dialog.on(\"show.bs.modal\", function() {\n      // sadly this doesn't work; show is called *just* before\n      // the backdrop is added so we'd need a setTimeout hack or\n      // otherwise... leaving in as would be nice\n      if (options.backdrop) {\n        dialog.next(\".modal-backdrop\").addClass(\"bootbox-backdrop\");\n      }\n    });\n    */\n\n    dialog.on(\"shown.bs.modal\", function () {\n      dialog.find(\".btn-primary:first\").focus();\n    });\n    /**\n     * Bootbox event listeners; experimental and may not last\n     * just an attempt to decouple some behaviours from their\n     * respective triggers\n     */\n\n    if (options.backdrop !== \"static\") {\n      // A boolean true/false according to the Bootstrap docs\n      // should show a dialog the user can dismiss by clicking on\n      // the background.\n      // We always only ever pass static/false to the actual\n      // $.modal function because with `true` we can't trap\n      // this event (the .modal-backdrop swallows it)\n      // However, we still want to sort of respect true\n      // and invoke the escape mechanism instead\n      dialog.on(\"click.dismiss.bs.modal\", function (e) {\n        // @NOTE: the target varies in >= 3.3.x releases since the modal backdrop\n        // moved *inside* the outer dialog rather than *alongside* it\n        if (dialog.children(\".modal-backdrop\").length) {\n          e.currentTarget = dialog.children(\".modal-backdrop\").get(0);\n        }\n\n        if (e.target !== e.currentTarget) {\n          return;\n        }\n\n        dialog.trigger(\"escape.close.bb\");\n      });\n    }\n\n    dialog.on(\"escape.close.bb\", function (e) {\n      if (callbacks.onEscape) {\n        processCallback(e, dialog, callbacks.onEscape);\n      }\n    });\n    /**\n     * Standard jQuery event listeners; used to handle user\n     * interaction with our dialog\n     */\n\n    dialog.on(\"click\", \".modal-footer button\", function (e) {\n      var callbackKey = $(this).data(\"bb-handler\");\n      processCallback(e, dialog, callbacks[callbackKey]);\n    });\n    dialog.on(\"click\", \".bootbox-close-button\", function (e) {\n      // onEscape might be falsy but that's fine; the fact is\n      // if the user has managed to click the close button we\n      // have to close the dialog, callback or not\n      processCallback(e, dialog, callbacks.onEscape);\n    });\n    dialog.on(\"keyup\", function (e) {\n      if (e.which === 27) {\n        dialog.trigger(\"escape.close.bb\");\n      }\n    }); // the remainder of this method simply deals with adding our\n    // dialogent to the DOM, augmenting it with Bootstrap's modal\n    // functionality and then giving the resulting object back\n    // to our caller\n\n    $(options.container).append(dialog);\n    dialog.modal({\n      backdrop: options.backdrop ? \"static\" : false,\n      keyboard: false,\n      show: false\n    });\n\n    if (options.show) {\n      dialog.modal(\"show\");\n    } // @TODO should we return the raw element here or should\n    // we wrap it in an object on which we can expose some neater\n    // methods, e.g. var d = bootbox.alert(); d.hide(); instead\n    // of d.modal(\"hide\");\n\n    /*\n     function BBDialog(elem) {\n       this.elem = elem;\n     }\n      BBDialog.prototype = {\n       hide: function() {\n         return this.elem.modal(\"hide\");\n       },\n       show: function() {\n         return this.elem.modal(\"show\");\n       }\n     };\n     */\n\n\n    return dialog;\n  };\n\n  exports.setDefaults = function () {\n    var values = {};\n\n    if (arguments.length === 2) {\n      // allow passing of single key/value...\n      values[arguments[0]] = arguments[1];\n    } else {\n      // ... and as an object too\n      values = arguments[0];\n    }\n\n    $.extend(defaults, values);\n  };\n\n  exports.hideAll = function () {\n    $(\".bootbox\").modal(\"hide\");\n    return exports;\n  };\n  /**\n   * standard locales. Please add more according to ISO 639-1 standard. Multiple language variants are\n   * unlikely to be required. If this gets too large it can be split out into separate JS files.\n   */\n\n\n  var locales = {\n    bg_BG: {\n      OK: \"Ок\",\n      CANCEL: \"Отказ\",\n      CONFIRM: \"Потвърждавам\"\n    },\n    br: {\n      OK: \"OK\",\n      CANCEL: \"Cancelar\",\n      CONFIRM: \"Sim\"\n    },\n    cs: {\n      OK: \"OK\",\n      CANCEL: \"Zrušit\",\n      CONFIRM: \"Potvrdit\"\n    },\n    da: {\n      OK: \"OK\",\n      CANCEL: \"Annuller\",\n      CONFIRM: \"Accepter\"\n    },\n    de: {\n      OK: \"OK\",\n      CANCEL: \"Abbrechen\",\n      CONFIRM: \"Akzeptieren\"\n    },\n    el: {\n      OK: \"Εντάξει\",\n      CANCEL: \"Ακύρωση\",\n      CONFIRM: \"Επιβεβαίωση\"\n    },\n    en: {\n      OK: \"OK\",\n      CANCEL: \"Cancel\",\n      CONFIRM: \"OK\"\n    },\n    es: {\n      OK: \"OK\",\n      CANCEL: \"Cancelar\",\n      CONFIRM: \"Aceptar\"\n    },\n    et: {\n      OK: \"OK\",\n      CANCEL: \"Katkesta\",\n      CONFIRM: \"OK\"\n    },\n    fa: {\n      OK: \"قبول\",\n      CANCEL: \"لغو\",\n      CONFIRM: \"تایید\"\n    },\n    fi: {\n      OK: \"OK\",\n      CANCEL: \"Peruuta\",\n      CONFIRM: \"OK\"\n    },\n    fr: {\n      OK: \"OK\",\n      CANCEL: \"Annuler\",\n      CONFIRM: \"D'accord\"\n    },\n    he: {\n      OK: \"אישור\",\n      CANCEL: \"ביטול\",\n      CONFIRM: \"אישור\"\n    },\n    hu: {\n      OK: \"OK\",\n      CANCEL: \"Mégsem\",\n      CONFIRM: \"Megerősít\"\n    },\n    hr: {\n      OK: \"OK\",\n      CANCEL: \"Odustani\",\n      CONFIRM: \"Potvrdi\"\n    },\n    id: {\n      OK: \"OK\",\n      CANCEL: \"Batal\",\n      CONFIRM: \"OK\"\n    },\n    it: {\n      OK: \"OK\",\n      CANCEL: \"Annulla\",\n      CONFIRM: \"Conferma\"\n    },\n    ja: {\n      OK: \"OK\",\n      CANCEL: \"キャンセル\",\n      CONFIRM: \"確認\"\n    },\n    lt: {\n      OK: \"Gerai\",\n      CANCEL: \"Atšaukti\",\n      CONFIRM: \"Patvirtinti\"\n    },\n    lv: {\n      OK: \"Labi\",\n      CANCEL: \"Atcelt\",\n      CONFIRM: \"Apstiprināt\"\n    },\n    nl: {\n      OK: \"OK\",\n      CANCEL: \"Annuleren\",\n      CONFIRM: \"Accepteren\"\n    },\n    no: {\n      OK: \"OK\",\n      CANCEL: \"Avbryt\",\n      CONFIRM: \"OK\"\n    },\n    pl: {\n      OK: \"OK\",\n      CANCEL: \"Anuluj\",\n      CONFIRM: \"Potwierdź\"\n    },\n    pt: {\n      OK: \"OK\",\n      CANCEL: \"Cancelar\",\n      CONFIRM: \"Confirmar\"\n    },\n    ru: {\n      OK: \"OK\",\n      CANCEL: \"Отмена\",\n      CONFIRM: \"Применить\"\n    },\n    sq: {\n      OK: \"OK\",\n      CANCEL: \"Anulo\",\n      CONFIRM: \"Prano\"\n    },\n    sv: {\n      OK: \"OK\",\n      CANCEL: \"Avbryt\",\n      CONFIRM: \"OK\"\n    },\n    th: {\n      OK: \"ตกลง\",\n      CANCEL: \"ยกเลิก\",\n      CONFIRM: \"ยืนยัน\"\n    },\n    tr: {\n      OK: \"Tamam\",\n      CANCEL: \"İptal\",\n      CONFIRM: \"Onayla\"\n    },\n    zh_CN: {\n      OK: \"OK\",\n      CANCEL: \"取消\",\n      CONFIRM: \"确认\"\n    },\n    zh_TW: {\n      OK: \"OK\",\n      CANCEL: \"取消\",\n      CONFIRM: \"確認\"\n    }\n  };\n\n  exports.addLocale = function (name, values) {\n    $.each([\"OK\", \"CANCEL\", \"CONFIRM\"], function (_, v) {\n      if (!values[v]) {\n        throw new Error(\"Please supply a translation for '\" + v + \"'\");\n      }\n    });\n    locales[name] = {\n      OK: values.OK,\n      CANCEL: values.CANCEL,\n      CONFIRM: values.CONFIRM\n    };\n    return exports;\n  };\n\n  exports.removeLocale = function (name) {\n    delete locales[name];\n    return exports;\n  };\n\n  exports.setLocale = function (name) {\n    return exports.setDefaults(\"locale\", name);\n  };\n\n  exports.init = function (_$) {\n    return init(_$ || $);\n  };\n\n  return exports;\n});"],"sourceRoot":""}